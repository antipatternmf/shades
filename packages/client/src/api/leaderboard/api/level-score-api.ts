/* tslint:disable */
/* eslint-disable */
/**
 * Shades
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AllTotalsDto } from '../models';
// @ts-ignore
import { LevelScoreDto } from '../models';
// @ts-ignore
import { SaveLevelScoreDto } from '../models';
/**
 * LevelScoreApi - axios parameter creator
 * @export
 */
export const LevelScoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete level score
         * @param {string} username 
         * @param {number} levelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLevelScore: async (username: string, levelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('deleteLevelScore', 'username', username)
            // verify required parameter 'levelId' is not null or undefined
            assertParamExists('deleteLevelScore', 'levelId', levelId)
            const localVarPath = `/level-score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (levelId !== undefined) {
                localVarQueryParameter['level_id'] = levelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data for leaderboard
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTotals: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/level-score/all-totals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get scores of levels
         * @param {string} username Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelScores: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getLevelScores', 'username', username)
            const localVarPath = `/level-score/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save level score
         * @param {SaveLevelScoreDto} [saveLevelScoreDto] Save level score
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLevelScore: async (saveLevelScoreDto?: SaveLevelScoreDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/level-score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveLevelScoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LevelScoreApi - functional programming interface
 * @export
 */
export const LevelScoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LevelScoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete level score
         * @param {string} username 
         * @param {number} levelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLevelScore(username: string, levelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelScoreDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLevelScore(username, levelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get data for leaderboard
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTotals(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllTotalsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTotals(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get scores of levels
         * @param {string} username Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLevelScores(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LevelScoreDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLevelScores(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save level score
         * @param {SaveLevelScoreDto} [saveLevelScoreDto] Save level score
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveLevelScore(saveLevelScoreDto?: SaveLevelScoreDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelScoreDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveLevelScore(saveLevelScoreDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LevelScoreApi - factory interface
 * @export
 */
export const LevelScoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LevelScoreApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete level score
         * @param {string} username 
         * @param {number} levelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLevelScore(username: string, levelId: number, options?: any): AxiosPromise<LevelScoreDto> {
            return localVarFp.deleteLevelScore(username, levelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get data for leaderboard
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTotals(offset?: number, limit?: number, options?: any): AxiosPromise<AllTotalsDto> {
            return localVarFp.getAllTotals(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get scores of levels
         * @param {string} username Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelScores(username: string, options?: any): AxiosPromise<Array<LevelScoreDto>> {
            return localVarFp.getLevelScores(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save level score
         * @param {SaveLevelScoreDto} [saveLevelScoreDto] Save level score
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLevelScore(saveLevelScoreDto?: SaveLevelScoreDto, options?: any): AxiosPromise<LevelScoreDto> {
            return localVarFp.saveLevelScore(saveLevelScoreDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LevelScoreApi - interface
 * @export
 * @interface LevelScoreApi
 */
export interface LevelScoreApiInterface {
    /**
     * 
     * @summary Delete level score
     * @param {string} username 
     * @param {number} levelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApiInterface
     */
    deleteLevelScore(username: string, levelId: number, options?: AxiosRequestConfig): AxiosPromise<LevelScoreDto>;

    /**
     * 
     * @summary Get data for leaderboard
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApiInterface
     */
    getAllTotals(offset?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<AllTotalsDto>;

    /**
     * 
     * @summary Get scores of levels
     * @param {string} username Username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApiInterface
     */
    getLevelScores(username: string, options?: AxiosRequestConfig): AxiosPromise<Array<LevelScoreDto>>;

    /**
     * 
     * @summary Save level score
     * @param {SaveLevelScoreDto} [saveLevelScoreDto] Save level score
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApiInterface
     */
    saveLevelScore(saveLevelScoreDto?: SaveLevelScoreDto, options?: AxiosRequestConfig): AxiosPromise<LevelScoreDto>;

}

/**
 * LevelScoreApi - object-oriented interface
 * @export
 * @class LevelScoreApi
 * @extends {BaseAPI}
 */
export class LevelScoreApi extends BaseAPI implements LevelScoreApiInterface {
    /**
     * 
     * @summary Delete level score
     * @param {string} username 
     * @param {number} levelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApi
     */
    public deleteLevelScore(username: string, levelId: number, options?: AxiosRequestConfig) {
        return LevelScoreApiFp(this.configuration).deleteLevelScore(username, levelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get data for leaderboard
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApi
     */
    public getAllTotals(offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return LevelScoreApiFp(this.configuration).getAllTotals(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get scores of levels
     * @param {string} username Username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApi
     */
    public getLevelScores(username: string, options?: AxiosRequestConfig) {
        return LevelScoreApiFp(this.configuration).getLevelScores(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save level score
     * @param {SaveLevelScoreDto} [saveLevelScoreDto] Save level score
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelScoreApi
     */
    public saveLevelScore(saveLevelScoreDto?: SaveLevelScoreDto, options?: AxiosRequestConfig) {
        return LevelScoreApiFp(this.configuration).saveLevelScore(saveLevelScoreDto, options).then((request) => request(this.axios, this.basePath));
    }
}
