/* tslint:disable */
/* eslint-disable */
/**
 * Shades
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SelectUserThemeDto } from '../models';
// @ts-ignore
import { SiteThemeType } from '../models';
// @ts-ignore
import { UpdateUserThemeRequest } from '../models';
// @ts-ignore
import { UserThemeType } from '../models';
/**
 * UserThemeApi - axios parameter creator
 * @export
 */
export const UserThemeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add User Theme
         * @param {SelectUserThemeDto} [selectUserThemeDto] Add User Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserTheme: async (selectUserThemeDto?: SelectUserThemeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-theme`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selectUserThemeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User Theme
         * @param {number} id User Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserTheme: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserTheme', 'id', id)
            const localVarPath = `/user-theme/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTheme: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-theme`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User Theme
         * @param {number} id User Theme ID
         * @param {UpdateUserThemeRequest} [updateUserThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserTheme: async (id: number, updateUserThemeRequest?: UpdateUserThemeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUserTheme', 'id', id)
            const localVarPath = `/user-theme/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserThemeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserThemeApi - functional programming interface
 * @export
 */
export const UserThemeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserThemeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add User Theme
         * @param {SelectUserThemeDto} [selectUserThemeDto] Add User Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserTheme(selectUserThemeDto?: SelectUserThemeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserTheme(selectUserThemeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete User Theme
         * @param {number} id User Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserTheme(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserTheme(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTheme(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTheme(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update User Theme
         * @param {number} id User Theme ID
         * @param {UpdateUserThemeRequest} [updateUserThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserTheme(id: number, updateUserThemeRequest?: UpdateUserThemeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserTheme(id, updateUserThemeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserThemeApi - factory interface
 * @export
 */
export const UserThemeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserThemeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add User Theme
         * @param {SelectUserThemeDto} [selectUserThemeDto] Add User Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserTheme(selectUserThemeDto?: SelectUserThemeDto, options?: any): AxiosPromise<UserThemeType> {
            return localVarFp.addUserTheme(selectUserThemeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User Theme
         * @param {number} id User Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserTheme(id: number, options?: any): AxiosPromise<UserThemeType> {
            return localVarFp.deleteUserTheme(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTheme(options?: any): AxiosPromise<UserThemeType> {
            return localVarFp.getUserTheme(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User Theme
         * @param {number} id User Theme ID
         * @param {UpdateUserThemeRequest} [updateUserThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserTheme(id: number, updateUserThemeRequest?: UpdateUserThemeRequest, options?: any): AxiosPromise<SiteThemeType> {
            return localVarFp.updateUserTheme(id, updateUserThemeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserThemeApi - interface
 * @export
 * @interface UserThemeApi
 */
export interface UserThemeApiInterface {
    /**
     * 
     * @summary Add User Theme
     * @param {SelectUserThemeDto} [selectUserThemeDto] Add User Theme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApiInterface
     */
    addUserTheme(selectUserThemeDto?: SelectUserThemeDto, options?: AxiosRequestConfig): AxiosPromise<UserThemeType>;

    /**
     * 
     * @summary Delete User Theme
     * @param {number} id User Theme ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApiInterface
     */
    deleteUserTheme(id: number, options?: AxiosRequestConfig): AxiosPromise<UserThemeType>;

    /**
     * 
     * @summary Get User Theme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApiInterface
     */
    getUserTheme(options?: AxiosRequestConfig): AxiosPromise<UserThemeType>;

    /**
     * 
     * @summary Update User Theme
     * @param {number} id User Theme ID
     * @param {UpdateUserThemeRequest} [updateUserThemeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApiInterface
     */
    updateUserTheme(id: number, updateUserThemeRequest?: UpdateUserThemeRequest, options?: AxiosRequestConfig): AxiosPromise<SiteThemeType>;

}

/**
 * UserThemeApi - object-oriented interface
 * @export
 * @class UserThemeApi
 * @extends {BaseAPI}
 */
export class UserThemeApi extends BaseAPI implements UserThemeApiInterface {
    /**
     * 
     * @summary Add User Theme
     * @param {SelectUserThemeDto} [selectUserThemeDto] Add User Theme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApi
     */
    public addUserTheme(selectUserThemeDto?: SelectUserThemeDto, options?: AxiosRequestConfig) {
        return UserThemeApiFp(this.configuration).addUserTheme(selectUserThemeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User Theme
     * @param {number} id User Theme ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApi
     */
    public deleteUserTheme(id: number, options?: AxiosRequestConfig) {
        return UserThemeApiFp(this.configuration).deleteUserTheme(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Theme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApi
     */
    public getUserTheme(options?: AxiosRequestConfig) {
        return UserThemeApiFp(this.configuration).getUserTheme(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User Theme
     * @param {number} id User Theme ID
     * @param {UpdateUserThemeRequest} [updateUserThemeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserThemeApi
     */
    public updateUserTheme(id: number, updateUserThemeRequest?: UpdateUserThemeRequest, options?: AxiosRequestConfig) {
        return UserThemeApiFp(this.configuration).updateUserTheme(id, updateUserThemeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
