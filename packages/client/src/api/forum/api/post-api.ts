/* tslint:disable */
/* eslint-disable */
/**
 * Shades
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AllAnswersDto } from '../models';
// @ts-ignore
import { AllPostsDto } from '../models';
// @ts-ignore
import { CreatePostDto } from '../models';
// @ts-ignore
import { PostType } from '../models';
// @ts-ignore
import { UpdatePostRequest } from '../models';
/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add post
     * @param {CreatePostDto} [createPostDto] Add post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPost: async (
      createPostDto?: CreatePostDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/post`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPostDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete post
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePost', 'id', id);
      const localVarPath = `/post/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all answers to post
     * @param {number} id Parent ID
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAnswersOfPosts: async (
      id: number,
      offset?: number,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getAllAnswersOfPosts', 'id', id);
      const localVarPath = `/post/answers/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all posts of thread
     * @param {number} id Thread ID
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPostsOfThread: async (
      id: number,
      offset?: number,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getAllPostsOfThread', 'id', id);
      const localVarPath = `/post/thread/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one post
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOnePost', 'id', id);
      const localVarPath = `/post/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update post
     * @param {number} id Post ID
     * @param {UpdatePostRequest} [updatePostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost: async (
      id: number,
      updatePostRequest?: UpdatePostRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updatePost', 'id', id);
      const localVarPath = `/post/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add post
     * @param {CreatePostDto} [createPostDto] Add post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addPost(
      createPostDto?: CreatePostDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addPost(createPostDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete post
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePost(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get all answers to post
     * @param {number} id Parent ID
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllAnswersOfPosts(
      id: number,
      offset?: number,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllAnswersDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAnswersOfPosts(
        id,
        offset,
        limit,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get all posts of thread
     * @param {number} id Thread ID
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPostsOfThread(
      id: number,
      offset?: number,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllPostsDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPostsOfThread(
        id,
        offset,
        limit,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get one post
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOnePost(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOnePost(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update post
     * @param {number} id Post ID
     * @param {UpdatePostRequest} [updatePostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePost(
      id: number,
      updatePostRequest?: UpdatePostRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostType>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(
        id,
        updatePostRequest,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PostApiFp(configuration);
  return {
    /**
     *
     * @summary Add post
     * @param {CreatePostDto} [createPostDto] Add post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPost(createPostDto?: CreatePostDto, options?: any): AxiosPromise<PostType> {
      return localVarFp.addPost(createPostDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete post
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost(id: number, options?: any): AxiosPromise<PostType> {
      return localVarFp.deletePost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all answers to post
     * @param {number} id Parent ID
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAnswersOfPosts(
      id: number,
      offset?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<AllAnswersDto> {
      return localVarFp
        .getAllAnswersOfPosts(id, offset, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all posts of thread
     * @param {number} id Thread ID
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPostsOfThread(
      id: number,
      offset?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<AllPostsDto> {
      return localVarFp
        .getAllPostsOfThread(id, offset, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one post
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnePost(id: number, options?: any): AxiosPromise<PostType> {
      return localVarFp.getOnePost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update post
     * @param {number} id Post ID
     * @param {UpdatePostRequest} [updatePostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost(
      id: number,
      updatePostRequest?: UpdatePostRequest,
      options?: any,
    ): AxiosPromise<PostType> {
      return localVarFp
        .updatePost(id, updatePostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PostApi - interface
 * @export
 * @interface PostApi
 */
export interface PostApiInterface {
  /**
   *
   * @summary Add post
   * @param {CreatePostDto} [createPostDto] Add post
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApiInterface
   */
  addPost(createPostDto?: CreatePostDto, options?: AxiosRequestConfig): AxiosPromise<PostType>;

  /**
   *
   * @summary Delete post
   * @param {number} id Post ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApiInterface
   */
  deletePost(id: number, options?: AxiosRequestConfig): AxiosPromise<PostType>;

  /**
   *
   * @summary Get all answers to post
   * @param {number} id Parent ID
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApiInterface
   */
  getAllAnswersOfPosts(
    id: number,
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ): AxiosPromise<AllAnswersDto>;

  /**
   *
   * @summary Get all posts of thread
   * @param {number} id Thread ID
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApiInterface
   */
  getAllPostsOfThread(
    id: number,
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ): AxiosPromise<AllPostsDto>;

  /**
   *
   * @summary Get one post
   * @param {number} id Post ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApiInterface
   */
  getOnePost(id: number, options?: AxiosRequestConfig): AxiosPromise<PostType>;

  /**
   *
   * @summary Update post
   * @param {number} id Post ID
   * @param {UpdatePostRequest} [updatePostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApiInterface
   */
  updatePost(
    id: number,
    updatePostRequest?: UpdatePostRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PostType>;
}

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI implements PostApiInterface {
  /**
   *
   * @summary Add post
   * @param {CreatePostDto} [createPostDto] Add post
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public addPost(createPostDto?: CreatePostDto, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .addPost(createPostDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete post
   * @param {number} id Post ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public deletePost(id: number, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .deletePost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all answers to post
   * @param {number} id Parent ID
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getAllAnswersOfPosts(
    id: number,
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return PostApiFp(this.configuration)
      .getAllAnswersOfPosts(id, offset, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all posts of thread
   * @param {number} id Thread ID
   * @param {number} [offset]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getAllPostsOfThread(
    id: number,
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return PostApiFp(this.configuration)
      .getAllPostsOfThread(id, offset, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one post
   * @param {number} id Post ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getOnePost(id: number, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .getOnePost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update post
   * @param {number} id Post ID
   * @param {UpdatePostRequest} [updatePostRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public updatePost(
    id: number,
    updatePostRequest?: UpdatePostRequest,
    options?: AxiosRequestConfig,
  ) {
    return PostApiFp(this.configuration)
      .updatePost(id, updatePostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
