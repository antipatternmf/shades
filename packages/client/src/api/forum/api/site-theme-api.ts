/* tslint:disable */
/* eslint-disable */
/**
 * Shades
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateSiteThemeDto } from '../models';
// @ts-ignore
import { SiteThemeType } from '../models';
/**
 * SiteThemeApi - axios parameter creator
 * @export
 */
export const SiteThemeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Site Theme
         * @param {CreateSiteThemeDto} [createSiteThemeDto] Add Site Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSiteTheme: async (createSiteThemeDto?: CreateSiteThemeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/site-theme`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSiteThemeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Site Theme
         * @param {number} id Site Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteTheme: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSiteTheme', 'id', id)
            const localVarPath = `/site-theme/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Site Themes
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSiteThemes: async (offset?: number, limit?: number, theme?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/site-theme`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one Site Theme
         * @param {number} id Site Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneSiteTheme: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneSiteTheme', 'id', id)
            const localVarPath = `/site-theme/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Site Theme
         * @param {number} id Site Theme ID
         * @param {CreateSiteThemeDto} [createSiteThemeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteTheme: async (id: number, createSiteThemeDto?: CreateSiteThemeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSiteTheme', 'id', id)
            const localVarPath = `/site-theme/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSiteThemeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SiteThemeApi - functional programming interface
 * @export
 */
export const SiteThemeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SiteThemeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Site Theme
         * @param {CreateSiteThemeDto} [createSiteThemeDto] Add Site Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSiteTheme(createSiteThemeDto?: CreateSiteThemeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSiteTheme(createSiteThemeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Site Theme
         * @param {number} id Site Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSiteTheme(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSiteTheme(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Site Themes
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSiteThemes(offset?: number, limit?: number, theme?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiteThemeType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSiteThemes(offset, limit, theme, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get one Site Theme
         * @param {number} id Site Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneSiteTheme(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneSiteTheme(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Site Theme
         * @param {number} id Site Theme ID
         * @param {CreateSiteThemeDto} [createSiteThemeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSiteTheme(id: number, createSiteThemeDto?: CreateSiteThemeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteThemeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSiteTheme(id, createSiteThemeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SiteThemeApi - factory interface
 * @export
 */
export const SiteThemeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SiteThemeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Site Theme
         * @param {CreateSiteThemeDto} [createSiteThemeDto] Add Site Theme
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSiteTheme(createSiteThemeDto?: CreateSiteThemeDto, options?: any): AxiosPromise<SiteThemeType> {
            return localVarFp.addSiteTheme(createSiteThemeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Site Theme
         * @param {number} id Site Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteTheme(id: number, options?: any): AxiosPromise<SiteThemeType> {
            return localVarFp.deleteSiteTheme(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Site Themes
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [theme] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSiteThemes(offset?: number, limit?: number, theme?: string, options?: any): AxiosPromise<Array<SiteThemeType>> {
            return localVarFp.getAllSiteThemes(offset, limit, theme, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one Site Theme
         * @param {number} id Site Theme ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneSiteTheme(id: number, options?: any): AxiosPromise<SiteThemeType> {
            return localVarFp.getOneSiteTheme(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Site Theme
         * @param {number} id Site Theme ID
         * @param {CreateSiteThemeDto} [createSiteThemeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteTheme(id: number, createSiteThemeDto?: CreateSiteThemeDto, options?: any): AxiosPromise<SiteThemeType> {
            return localVarFp.updateSiteTheme(id, createSiteThemeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SiteThemeApi - interface
 * @export
 * @interface SiteThemeApi
 */
export interface SiteThemeApiInterface {
    /**
     * 
     * @summary Add Site Theme
     * @param {CreateSiteThemeDto} [createSiteThemeDto] Add Site Theme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApiInterface
     */
    addSiteTheme(createSiteThemeDto?: CreateSiteThemeDto, options?: AxiosRequestConfig): AxiosPromise<SiteThemeType>;

    /**
     * 
     * @summary Delete Site Theme
     * @param {number} id Site Theme ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApiInterface
     */
    deleteSiteTheme(id: number, options?: AxiosRequestConfig): AxiosPromise<SiteThemeType>;

    /**
     * 
     * @summary Get all Site Themes
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [theme] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApiInterface
     */
    getAllSiteThemes(offset?: number, limit?: number, theme?: string, options?: AxiosRequestConfig): AxiosPromise<Array<SiteThemeType>>;

    /**
     * 
     * @summary Get one Site Theme
     * @param {number} id Site Theme ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApiInterface
     */
    getOneSiteTheme(id: number, options?: AxiosRequestConfig): AxiosPromise<SiteThemeType>;

    /**
     * 
     * @summary Update Site Theme
     * @param {number} id Site Theme ID
     * @param {CreateSiteThemeDto} [createSiteThemeDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApiInterface
     */
    updateSiteTheme(id: number, createSiteThemeDto?: CreateSiteThemeDto, options?: AxiosRequestConfig): AxiosPromise<SiteThemeType>;

}

/**
 * SiteThemeApi - object-oriented interface
 * @export
 * @class SiteThemeApi
 * @extends {BaseAPI}
 */
export class SiteThemeApi extends BaseAPI implements SiteThemeApiInterface {
    /**
     * 
     * @summary Add Site Theme
     * @param {CreateSiteThemeDto} [createSiteThemeDto] Add Site Theme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApi
     */
    public addSiteTheme(createSiteThemeDto?: CreateSiteThemeDto, options?: AxiosRequestConfig) {
        return SiteThemeApiFp(this.configuration).addSiteTheme(createSiteThemeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Site Theme
     * @param {number} id Site Theme ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApi
     */
    public deleteSiteTheme(id: number, options?: AxiosRequestConfig) {
        return SiteThemeApiFp(this.configuration).deleteSiteTheme(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Site Themes
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [theme] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApi
     */
    public getAllSiteThemes(offset?: number, limit?: number, theme?: string, options?: AxiosRequestConfig) {
        return SiteThemeApiFp(this.configuration).getAllSiteThemes(offset, limit, theme, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one Site Theme
     * @param {number} id Site Theme ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApi
     */
    public getOneSiteTheme(id: number, options?: AxiosRequestConfig) {
        return SiteThemeApiFp(this.configuration).getOneSiteTheme(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Site Theme
     * @param {number} id Site Theme ID
     * @param {CreateSiteThemeDto} [createSiteThemeDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteThemeApi
     */
    public updateSiteTheme(id: number, createSiteThemeDto?: CreateSiteThemeDto, options?: AxiosRequestConfig) {
        return SiteThemeApiFp(this.configuration).updateSiteTheme(id, createSiteThemeDto, options).then((request) => request(this.axios, this.basePath));
    }
}
