/* tslint:disable */
/* eslint-disable */
/**
 * Swagger
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { Resource } from '../models'
/**
 * ResourcesApi - axios parameter creator
 * @export
 */
export const ResourcesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Serving static files
     * @param {any} path Path to the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resourcesPathGet: async (
      path: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'path' is not null or undefined
      assertParamExists('resourcesPathGet', 'path', path)
      const localVarPath = `/resources/{path}`.replace(
        `{${'path'}}`,
        encodeURIComponent(String(path))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Upload resource(file) to server
     * @param {File} resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resourcesPost: async (
      resource: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resource' is not null or undefined
      assertParamExists('resourcesPost', 'resource', resource)
      const localVarPath = `/resources`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      if (resource !== undefined) {
        localVarFormParams.append('resource', resource as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResourcesApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Serving static files
     * @param {any} path Path to the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resourcesPathGet(
      path: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.resourcesPathGet(path, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Upload resource(file) to server
     * @param {File} resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resourcesPost(
      resource: File,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesPost(
        resource,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ResourcesApiFp(configuration)
  return {
    /**
     *
     * @summary Serving static files
     * @param {any} path Path to the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resourcesPathGet(path: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .resourcesPathGet(path, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary Upload resource(file) to server
     * @param {File} resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resourcesPost(resource: File, options?: any): AxiosPromise<Resource> {
      return localVarFp
        .resourcesPost(resource, options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * ResourcesApi - interface
 * @export
 * @interface ResourcesApi
 */
export interface ResourcesApiInterface {
  /**
   *
   * @summary Serving static files
   * @param {any} path Path to the file
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApiInterface
   */
  resourcesPathGet(path: any, options?: AxiosRequestConfig): AxiosPromise<void>

  /**
   *
   * @summary Upload resource(file) to server
   * @param {File} resource
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApiInterface
   */
  resourcesPost(
    resource: File,
    options?: AxiosRequestConfig
  ): AxiosPromise<Resource>
}

/**
 * ResourcesApi - object-oriented interface
 * @export
 * @class ResourcesApi
 * @extends {BaseAPI}
 */
export class ResourcesApi extends BaseAPI implements ResourcesApiInterface {
  /**
   *
   * @summary Serving static files
   * @param {any} path Path to the file
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public resourcesPathGet(path: any, options?: AxiosRequestConfig) {
    return ResourcesApiFp(this.configuration)
      .resourcesPathGet(path, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Upload resource(file) to server
   * @param {File} resource
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResourcesApi
   */
  public resourcesPost(resource: File, options?: AxiosRequestConfig) {
    return ResourcesApiFp(this.configuration)
      .resourcesPost(resource, options)
      .then(request => request(this.axios, this.basePath))
  }
}
