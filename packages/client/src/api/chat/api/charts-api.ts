/* tslint:disable */
/* eslint-disable */
/**
 * Swagger
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { LiveChartRequest } from '../models'
// @ts-ignore
import { LiveChartResponse } from '../models'
// @ts-ignore
import { StaticChartRequest } from '../models'
// @ts-ignore
import { StaticChartResponse } from '../models'
/**
 * ChartsApi - axios parameter creator
 * @export
 */
export const ChartsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {LiveChartRequest} next next (cursor)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chartsLivePost: async (
      next: LiveChartRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'next' is not null or undefined
      assertParamExists('chartsLivePost', 'next', next)
      const localVarPath = `/charts/live`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        next,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {StaticChartRequest} chartSize chart size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chartsStaticPost: async (
      chartSize: StaticChartRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'chartSize' is not null or undefined
      assertParamExists('chartsStaticPost', 'chartSize', chartSize)
      const localVarPath = `/charts/static`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        chartSize,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ChartsApi - functional programming interface
 * @export
 */
export const ChartsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChartsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {LiveChartRequest} next next (cursor)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chartsLivePost(
      next: LiveChartRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LiveChartResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.chartsLivePost(
        next,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {StaticChartRequest} chartSize chart size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chartsStaticPost(
      chartSize: StaticChartRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<StaticChartResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.chartsStaticPost(chartSize, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ChartsApi - factory interface
 * @export
 */
export const ChartsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ChartsApiFp(configuration)
  return {
    /**
     *
     * @param {LiveChartRequest} next next (cursor)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chartsLivePost(
      next: LiveChartRequest,
      options?: any
    ): AxiosPromise<LiveChartResponse> {
      return localVarFp
        .chartsLivePost(next, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @param {StaticChartRequest} chartSize chart size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chartsStaticPost(
      chartSize: StaticChartRequest,
      options?: any
    ): AxiosPromise<StaticChartResponse> {
      return localVarFp
        .chartsStaticPost(chartSize, options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * ChartsApi - interface
 * @export
 * @interface ChartsApi
 */
export interface ChartsApiInterface {
  /**
   *
   * @param {LiveChartRequest} next next (cursor)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChartsApiInterface
   */
  chartsLivePost(
    next: LiveChartRequest,
    options?: AxiosRequestConfig
  ): AxiosPromise<LiveChartResponse>

  /**
   *
   * @param {StaticChartRequest} chartSize chart size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChartsApiInterface
   */
  chartsStaticPost(
    chartSize: StaticChartRequest,
    options?: AxiosRequestConfig
  ): AxiosPromise<StaticChartResponse>
}

/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
export class ChartsApi extends BaseAPI implements ChartsApiInterface {
  /**
   *
   * @param {LiveChartRequest} next next (cursor)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChartsApi
   */
  public chartsLivePost(next: LiveChartRequest, options?: AxiosRequestConfig) {
    return ChartsApiFp(this.configuration)
      .chartsLivePost(next, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {StaticChartRequest} chartSize chart size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChartsApi
   */
  public chartsStaticPost(
    chartSize: StaticChartRequest,
    options?: AxiosRequestConfig
  ) {
    return ChartsApiFp(this.configuration)
      .chartsStaticPost(chartSize, options)
      .then(request => request(this.axios, this.basePath))
  }
}
