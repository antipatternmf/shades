/**
 * Swagger
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import type { Configuration } from '../configuration';
// Some imports not used depending on template conditions
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
import { BASE_PATH, RequestArgs, BaseAPI } from '../base';

import { LeaderboardNewLeaderRequest, LeaderboardRequest } from '../models';

/**
 * LeaderboardApi - axios parameter creator
 * @export
 */
export const LeaderboardApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get all leaderboard
     * @param {LeaderboardRequest} leaderboardRequest Leaderboard request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaderboardAllPost: async (
      leaderboardRequest: LeaderboardRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'leaderboardRequest' is not null or undefined
      assertParamExists('leaderboardAllPost', 'leaderboardRequest', leaderboardRequest);
      const localVarPath = '/leaderboard/all';
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        leaderboardRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add user to leaderboard
     * @param {LeaderboardNewLeaderRequest} leaderboardNewLeaderRequest Leader data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaderboardPost: async (
      leaderboardNewLeaderRequest: LeaderboardNewLeaderRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'leaderboardNewLeaderRequest' is not null or undefined
      assertParamExists(
        'leaderboardPost',
        'leaderboardNewLeaderRequest',
        leaderboardNewLeaderRequest,
      );
      const localVarPath = '/leaderboard';
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        leaderboardNewLeaderRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get team leaderboard
     * @param {any} teamName Name of the team, which leaderboard you want to get
     * @param {LeaderboardRequest} leaderboardRequest Leaderboard request.
     * Cursor is used for pagination. If limit is 10,
     * then for the 1st page - cursor&#x3D;0, for the 2nd page - cursor&#x3D;10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaderboardTeamNamePost: async (
      teamName: any,
      leaderboardRequest: LeaderboardRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists('leaderboardTeamNamePost', 'teamName', teamName);
      // verify required parameter 'leaderboardRequest' is not null or undefined
      assertParamExists('leaderboardTeamNamePost', 'leaderboardRequest', leaderboardRequest);
      const localVarPath = '/leaderboard/{teamName}'.replace(
        `{${'teamName'}}`,
        encodeURIComponent(String(teamName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        leaderboardRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LeaderboardApi - functional programming interface
 * @export
 */
export const LeaderboardApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LeaderboardApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get all leaderboard
     * @param {LeaderboardRequest} leaderboardRequest Leaderboard request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async leaderboardAllPost(
      leaderboardRequest: LeaderboardRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.leaderboardAllPost(
        leaderboardRequest,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Add user to leaderboard
     * @param {LeaderboardNewLeaderRequest} leaderboardNewLeaderRequest Leader data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async leaderboardPost(
      leaderboardNewLeaderRequest: LeaderboardNewLeaderRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.leaderboardPost(
        leaderboardNewLeaderRequest,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get team leaderboard
     * @param {any} teamName Name of the team, which leaderboard you want to get
     * @param {LeaderboardRequest} leaderboardRequest Leaderboard request.
     * Cursor is used for pagination.
     * If limit is 10, then for the 1st page - cursor&#x3D;0, for the 2nd page - cursor&#x3D;10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async leaderboardTeamNamePost(
      teamName: any,
      leaderboardRequest: LeaderboardRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.leaderboardTeamNamePost(
        teamName,
        leaderboardRequest,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * LeaderboardApi - factory interface
 * @export
 */
export const LeaderboardApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LeaderboardApiFp(configuration);
  return {
    /**
     *
     * @summary Get all leaderboard
     * @param {LeaderboardRequest} leaderboardRequest Leaderboard request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaderboardAllPost(leaderboardRequest: LeaderboardRequest, options?: any): AxiosPromise<void> {
      return localVarFp
        .leaderboardAllPost(leaderboardRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add user to leaderboard
     * @param {LeaderboardNewLeaderRequest} leaderboardNewLeaderRequest Leader data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaderboardPost(
      leaderboardNewLeaderRequest: LeaderboardNewLeaderRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .leaderboardPost(leaderboardNewLeaderRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get team leaderboard
     * @param {any} teamName Name of the team, which leaderboard you want to get
     * @param {LeaderboardRequest} leaderboardRequest Leaderboard request.
     * Cursor is used for pagination. If limit is 10,
     * then for the 1st page - cursor&#x3D;0, for the 2nd page - cursor&#x3D;10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaderboardTeamNamePost(
      teamName: any,
      leaderboardRequest: LeaderboardRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .leaderboardTeamNamePost(teamName, leaderboardRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LeaderboardApi - interface
 * @export
 * @interface LeaderboardApi
 */
export interface LeaderboardApiInterface {
  /**
   *
   * @summary Get all leaderboard
   * @param {LeaderboardRequest} leaderboardRequest Leaderboard request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LeaderboardApiInterface
   */
  leaderboardAllPost(
    leaderboardRequest: LeaderboardRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>;

  /**
   *
   * @summary Add user to leaderboard
   * @param {LeaderboardNewLeaderRequest} leaderboardNewLeaderRequest Leader data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LeaderboardApiInterface
   */
  leaderboardPost(
    leaderboardNewLeaderRequest: LeaderboardNewLeaderRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>;

  /**
   *
   * @summary Get team leaderboard
   * @param {any} teamName Name of the team, which leaderboard you want to get
   * @param {LeaderboardRequest} leaderboardRequest Leaderboard request.
   * Cursor is used for pagination. If limit is 10,
   * then for the 1st page - cursor&#x3D;0, for the 2nd page - cursor&#x3D;10.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LeaderboardApiInterface
   */
  leaderboardTeamNamePost(
    teamName: any,
    leaderboardRequest: LeaderboardRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>;
}

/**
 * LeaderboardApi - object-oriented interface
 * @export
 * @class LeaderboardApi
 * @extends {BaseAPI}
 */
export class LeaderboardApi extends BaseAPI implements LeaderboardApiInterface {
  /**
   *
   * @summary Get all leaderboard
   * @param {LeaderboardRequest} leaderboardRequest Leaderboard request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LeaderboardApi
   */
  public leaderboardAllPost(leaderboardRequest: LeaderboardRequest, options?: AxiosRequestConfig) {
    return LeaderboardApiFp(this.configuration)
      .leaderboardAllPost(leaderboardRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add user to leaderboard
   * @param {LeaderboardNewLeaderRequest} leaderboardNewLeaderRequest Leader data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LeaderboardApi
   */
  public leaderboardPost(
    leaderboardNewLeaderRequest: LeaderboardNewLeaderRequest,
    options?: AxiosRequestConfig,
  ) {
    return LeaderboardApiFp(this.configuration)
      .leaderboardPost(leaderboardNewLeaderRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get team leaderboard
   * @param {any} teamName Name of the team, which leaderboard you want to get
   * @param {LeaderboardRequest} leaderboardRequest Leaderboard request.
   * Cursor is used for pagination.
   * If limit is 10, then for the 1st page - cursor&#x3D;0, for the 2nd page - cursor&#x3D;10.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LeaderboardApi
   */
  public leaderboardTeamNamePost(
    teamName: any,
    leaderboardRequest: LeaderboardRequest,
    options?: AxiosRequestConfig,
  ) {
    return LeaderboardApiFp(this.configuration)
      .leaderboardTeamNamePost(teamName, leaderboardRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
