/**
 * Swagger
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import type { Configuration } from '../configuration';
// Some imports not used depending on template conditions
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
import {
  BASE_PATH,
  RequestArgs,
  BaseAPI,
} from '../base';
import { OauthSignInRequest, ServiceId } from '../models';

/**
 * OauthApi - axios parameter creator
 * @export
 */
export const OauthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Sign in / sign up with yandex
     * @param {OauthSignInRequest} oauthSignInRequest Oauth data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthYandexPost: async (
      oauthSignInRequest: OauthSignInRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'oauthSignInRequest' is not null or undefined
      assertParamExists(
        'oauthYandexPost',
        'oauthSignInRequest',
        oauthSignInRequest,
      );
      const localVarPath = '/oauth/yandex';
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oauthSignInRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get service id
     * @param {string} [redirectUri] Redirect uri that you are using for oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthYandexServiceIdGet: async (
      redirectUri?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = '/oauth/yandex/service-id';
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (redirectUri !== undefined) {
        localVarQueryParameter.redirect_uri = redirectUri;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OauthApi - functional programming interface
 * @export
 */
export const OauthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OauthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Sign in / sign up with yandex
     * @param {OauthSignInRequest} oauthSignInRequest Oauth data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oauthYandexPost(
      oauthSignInRequest: OauthSignInRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
      > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.oauthYandexPost(
        oauthSignInRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get service id
     * @param {string} [redirectUri] Redirect uri that you are using for oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oauthYandexServiceIdGet(
      redirectUri?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceId>
      > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.oauthYandexServiceIdGet(
        redirectUri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * OauthApi - factory interface
 * @export
 */
export const OauthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OauthApiFp(configuration);
  return {
    /**
     *
     * @summary Sign in / sign up with yandex
     * @param {OauthSignInRequest} oauthSignInRequest Oauth data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthYandexPost(
      oauthSignInRequest: OauthSignInRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .oauthYandexPost(oauthSignInRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get service id
     * @param {string} [redirectUri] Redirect uri that you are using for oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthYandexServiceIdGet(
      redirectUri?: string,
      options?: any,
    ): AxiosPromise<ServiceId> {
      return localVarFp
        .oauthYandexServiceIdGet(redirectUri, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OauthApi - interface
 * @export
 * @interface OauthApi
 */
export interface OauthApiInterface {
  /**
   *
   * @summary Sign in / sign up with yandex
   * @param {OauthSignInRequest} oauthSignInRequest Oauth data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthApiInterface
   */
  oauthYandexPost(
    oauthSignInRequest: OauthSignInRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>
  ;
  /**
   *
   * @summary Get service id
   * @param {string} [redirectUri] Redirect uri that you are using for oauth
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthApiInterface
   */
  oauthYandexServiceIdGet(
    redirectUri?: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ServiceId>;
}

/**
 * OauthApi - object-oriented interface
 * @export
 * @class OauthApi
 * @extends {BaseAPI}
 */
export class OauthApi extends BaseAPI implements OauthApiInterface {
  /**
   *
   * @summary Sign in / sign up with yandex
   * @param {OauthSignInRequest} oauthSignInRequest Oauth data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthApi
   */
  public oauthYandexPost(
    oauthSignInRequest: OauthSignInRequest,
    options?: AxiosRequestConfig,
  ) {
    return OauthApiFp(this.configuration)
      .oauthYandexPost(oauthSignInRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get service id
   * @param {string} [redirectUri] Redirect uri that you are using for oauth
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthApi
   */
  public oauthYandexServiceIdGet(
    redirectUri?: string,
    options?: AxiosRequestConfig,
  ) {
    return OauthApiFp(this.configuration)
      .oauthYandexServiceIdGet(redirectUri, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
