/* tslint:disable */
/* eslint-disable */
/**
 * Swagger
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { LiveVideoInfoRequest } from '../models'
/**
 * VideosApi - axios parameter creator
 * @export
 */
export const VideosApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get live video stream (part of the video will depend on the \"start\" bytes of the range
     * @param {any} range
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosLiveGet: async (
      range: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'range' is not null or undefined
      assertParamExists('videosLiveGet', 'range', range)
      const localVarPath = `/videos/live`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (range != null) {
        localVarHeaderParameter['Range'] =
          typeof range === 'string' ? range : JSON.stringify(range)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get live full video info (size) --- Increases with each request
     * @param {LiveVideoInfoRequest} iteration iteration (cursor)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosLiveInfoPost: async (
      iteration: LiveVideoInfoRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'iteration' is not null or undefined
      assertParamExists('videosLiveInfoPost', 'iteration', iteration)
      const localVarPath = `/videos/live/info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        iteration,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get static video stream
     * @param {any} range
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosStaticGet: async (
      range: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'range' is not null or undefined
      assertParamExists('videosStaticGet', 'range', range)
      const localVarPath = `/videos/static`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (range != null) {
        localVarHeaderParameter['Range'] =
          typeof range === 'string' ? range : JSON.stringify(range)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get static full video info (size)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosStaticInfoGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/videos/static/info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * VideosApi - functional programming interface
 * @export
 */
export const VideosApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VideosApiAxiosParamCreator(configuration)
  return {
    /**
     * Get live video stream (part of the video will depend on the \"start\" bytes of the range
     * @param {any} range
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async videosLiveGet(
      range: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.videosLiveGet(
        range,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get live full video info (size) --- Increases with each request
     * @param {LiveVideoInfoRequest} iteration iteration (cursor)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async videosLiveInfoPost(
      iteration: LiveVideoInfoRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.videosLiveInfoPost(iteration, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get static video stream
     * @param {any} range
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async videosStaticGet(
      range: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.videosStaticGet(
        range,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * Get static full video info (size)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async videosStaticInfoGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.videosStaticInfoGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * VideosApi - factory interface
 * @export
 */
export const VideosApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = VideosApiFp(configuration)
  return {
    /**
     * Get live video stream (part of the video will depend on the \"start\" bytes of the range
     * @param {any} range
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosLiveGet(range: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .videosLiveGet(range, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get live full video info (size) --- Increases with each request
     * @param {LiveVideoInfoRequest} iteration iteration (cursor)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosLiveInfoPost(
      iteration: LiveVideoInfoRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .videosLiveInfoPost(iteration, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get static video stream
     * @param {any} range
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosStaticGet(range: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .videosStaticGet(range, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get static full video info (size)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    videosStaticInfoGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .videosStaticInfoGet(options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * VideosApi - interface
 * @export
 * @interface VideosApi
 */
export interface VideosApiInterface {
  /**
   * Get live video stream (part of the video will depend on the \"start\" bytes of the range
   * @param {any} range
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApiInterface
   */
  videosLiveGet(range: any, options?: AxiosRequestConfig): AxiosPromise<void>

  /**
   * Get live full video info (size) --- Increases with each request
   * @param {LiveVideoInfoRequest} iteration iteration (cursor)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApiInterface
   */
  videosLiveInfoPost(
    iteration: LiveVideoInfoRequest,
    options?: AxiosRequestConfig
  ): AxiosPromise<void>

  /**
   * Get static video stream
   * @param {any} range
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApiInterface
   */
  videosStaticGet(range: any, options?: AxiosRequestConfig): AxiosPromise<void>

  /**
   * Get static full video info (size)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApiInterface
   */
  videosStaticInfoGet(options?: AxiosRequestConfig): AxiosPromise<void>
}

/**
 * VideosApi - object-oriented interface
 * @export
 * @class VideosApi
 * @extends {BaseAPI}
 */
export class VideosApi extends BaseAPI implements VideosApiInterface {
  /**
   * Get live video stream (part of the video will depend on the \"start\" bytes of the range
   * @param {any} range
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApi
   */
  public videosLiveGet(range: any, options?: AxiosRequestConfig) {
    return VideosApiFp(this.configuration)
      .videosLiveGet(range, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get live full video info (size) --- Increases with each request
   * @param {LiveVideoInfoRequest} iteration iteration (cursor)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApi
   */
  public videosLiveInfoPost(
    iteration: LiveVideoInfoRequest,
    options?: AxiosRequestConfig
  ) {
    return VideosApiFp(this.configuration)
      .videosLiveInfoPost(iteration, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get static video stream
   * @param {any} range
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApi
   */
  public videosStaticGet(range: any, options?: AxiosRequestConfig) {
    return VideosApiFp(this.configuration)
      .videosStaticGet(range, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get static full video info (size)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideosApi
   */
  public videosStaticInfoGet(options?: AxiosRequestConfig) {
    return VideosApiFp(this.configuration)
      .videosStaticInfoGet(options)
      .then(request => request(this.axios, this.basePath))
  }
}
