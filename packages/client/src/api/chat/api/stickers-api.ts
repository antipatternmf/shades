/* tslint:disable */
/* eslint-disable */
/**
 * Swagger
 * Web middle chats API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { BadRequestError } from '../models'
// @ts-ignore
import { StickerPacksResponse } from '../models'
// @ts-ignore
import { StickersResponse } from '../models'
/**
 * StickersApi - axios parameter creator
 * @export
 */
export const StickersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get user\'s favorite sticker packs
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {string} [title] Sticker pack title to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersFavoriteGet: async (
      offset?: number,
      limit?: number,
      title?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/stickers/favorite`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (title !== undefined) {
        localVarQueryParameter['title'] = title
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get sticker packs
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {string} [title] Sticker\&#39;s title to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersGet: async (
      offset?: number,
      limit?: number,
      title?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/stickers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (title !== undefined) {
        localVarQueryParameter['title'] = title
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove pack from favorites
     * @param {any} id Numeric sticker pack id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdFavoriteDelete: async (
      id: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('stickersIdFavoriteDelete', 'id', id)
      const localVarPath = `/stickers/{id}/favorite`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Add pack to favorites
     * @param {any} id Numeric sticker pack id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdFavoritePost: async (
      id: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('stickersIdFavoritePost', 'id', id)
      const localVarPath = `/stickers/{id}/favorite`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get stickers from pack
     * @param {any} id Numeric sticker pack id
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdGet: async (
      id: any,
      offset?: number,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('stickersIdGet', 'id', id)
      const localVarPath = `/stickers/{id}/`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Add more stickers (images) to the pack
     * @param {any} id Numeric sticker pack id
     * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdPost: async (
      id: any,
      resource: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('stickersIdPost', 'id', id)
      // verify required parameter 'resource' is not null or undefined
      assertParamExists('stickersIdPost', 'resource', resource)
      const localVarPath = `/stickers/{id}/`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      if (resource !== undefined) {
        localVarFormParams.append('resource', resource as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create sticker pack
     * @param {string} title Sticker pack title
     * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersPost: async (
      title: string,
      resource: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'title' is not null or undefined
      assertParamExists('stickersPost', 'title', title)
      // verify required parameter 'resource' is not null or undefined
      assertParamExists('stickersPost', 'resource', resource)
      const localVarPath = `/stickers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)()

      if (title !== undefined) {
        localVarFormParams.append('title', title as any)
      }

      if (resource !== undefined) {
        localVarFormParams.append('resource', resource as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * StickersApi - functional programming interface
 * @export
 */
export const StickersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StickersApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get user\'s favorite sticker packs
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {string} [title] Sticker pack title to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stickersFavoriteGet(
      offset?: number,
      limit?: number,
      title?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<StickerPacksResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.stickersFavoriteGet(
          offset,
          limit,
          title,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Get sticker packs
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {string} [title] Sticker\&#39;s title to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stickersGet(
      offset?: number,
      limit?: number,
      title?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<StickerPacksResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stickersGet(
        offset,
        limit,
        title,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Remove pack from favorites
     * @param {any} id Numeric sticker pack id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stickersIdFavoriteDelete(
      id: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.stickersIdFavoriteDelete(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Add pack to favorites
     * @param {any} id Numeric sticker pack id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stickersIdFavoritePost(
      id: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.stickersIdFavoritePost(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Get stickers from pack
     * @param {any} id Numeric sticker pack id
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stickersIdGet(
      id: any,
      offset?: number,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<StickersResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stickersIdGet(
        id,
        offset,
        limit,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Add more stickers (images) to the pack
     * @param {any} id Numeric sticker pack id
     * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stickersIdPost(
      id: any,
      resource: File,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stickersIdPost(
        id,
        resource,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Create sticker pack
     * @param {string} title Sticker pack title
     * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stickersPost(
      title: string,
      resource: File,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stickersPost(
        title,
        resource,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * StickersApi - factory interface
 * @export
 */
export const StickersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = StickersApiFp(configuration)
  return {
    /**
     *
     * @summary Get user\'s favorite sticker packs
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {string} [title] Sticker pack title to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersFavoriteGet(
      offset?: number,
      limit?: number,
      title?: string,
      options?: any
    ): AxiosPromise<StickerPacksResponse> {
      return localVarFp
        .stickersFavoriteGet(offset, limit, title, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary Get sticker packs
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {string} [title] Sticker\&#39;s title to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersGet(
      offset?: number,
      limit?: number,
      title?: string,
      options?: any
    ): AxiosPromise<Array<StickerPacksResponse>> {
      return localVarFp
        .stickersGet(offset, limit, title, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary Remove pack from favorites
     * @param {any} id Numeric sticker pack id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdFavoriteDelete(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .stickersIdFavoriteDelete(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary Add pack to favorites
     * @param {any} id Numeric sticker pack id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdFavoritePost(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .stickersIdFavoritePost(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary Get stickers from pack
     * @param {any} id Numeric sticker pack id
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdGet(
      id: any,
      offset?: number,
      limit?: number,
      options?: any
    ): AxiosPromise<Array<StickersResponse>> {
      return localVarFp
        .stickersIdGet(id, offset, limit, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary Add more stickers (images) to the pack
     * @param {any} id Numeric sticker pack id
     * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersIdPost(id: any, resource: File, options?: any): AxiosPromise<void> {
      return localVarFp
        .stickersIdPost(id, resource, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary Create sticker pack
     * @param {string} title Sticker pack title
     * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stickersPost(
      title: string,
      resource: File,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .stickersPost(title, resource, options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * StickersApi - interface
 * @export
 * @interface StickersApi
 */
export interface StickersApiInterface {
  /**
   *
   * @summary Get user\'s favorite sticker packs
   * @param {number} [offset] The number of items to skip before starting to collect the result set
   * @param {number} [limit] The numbers of items to return
   * @param {string} [title] Sticker pack title to filter by
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApiInterface
   */
  stickersFavoriteGet(
    offset?: number,
    limit?: number,
    title?: string,
    options?: AxiosRequestConfig
  ): AxiosPromise<StickerPacksResponse>

  /**
   *
   * @summary Get sticker packs
   * @param {number} [offset] The number of items to skip before starting to collect the result set
   * @param {number} [limit] The numbers of items to return
   * @param {string} [title] Sticker\&#39;s title to filter by
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApiInterface
   */
  stickersGet(
    offset?: number,
    limit?: number,
    title?: string,
    options?: AxiosRequestConfig
  ): AxiosPromise<Array<StickerPacksResponse>>

  /**
   *
   * @summary Remove pack from favorites
   * @param {any} id Numeric sticker pack id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApiInterface
   */
  stickersIdFavoriteDelete(
    id: any,
    options?: AxiosRequestConfig
  ): AxiosPromise<void>

  /**
   *
   * @summary Add pack to favorites
   * @param {any} id Numeric sticker pack id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApiInterface
   */
  stickersIdFavoritePost(
    id: any,
    options?: AxiosRequestConfig
  ): AxiosPromise<void>

  /**
   *
   * @summary Get stickers from pack
   * @param {any} id Numeric sticker pack id
   * @param {number} [offset] The number of items to skip before starting to collect the result set
   * @param {number} [limit] The numbers of items to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApiInterface
   */
  stickersIdGet(
    id: any,
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig
  ): AxiosPromise<Array<StickersResponse>>

  /**
   *
   * @summary Add more stickers (images) to the pack
   * @param {any} id Numeric sticker pack id
   * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApiInterface
   */
  stickersIdPost(
    id: any,
    resource: File,
    options?: AxiosRequestConfig
  ): AxiosPromise<void>

  /**
   *
   * @summary Create sticker pack
   * @param {string} title Sticker pack title
   * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApiInterface
   */
  stickersPost(
    title: string,
    resource: File,
    options?: AxiosRequestConfig
  ): AxiosPromise<void>
}

/**
 * StickersApi - object-oriented interface
 * @export
 * @class StickersApi
 * @extends {BaseAPI}
 */
export class StickersApi extends BaseAPI implements StickersApiInterface {
  /**
   *
   * @summary Get user\'s favorite sticker packs
   * @param {number} [offset] The number of items to skip before starting to collect the result set
   * @param {number} [limit] The numbers of items to return
   * @param {string} [title] Sticker pack title to filter by
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApi
   */
  public stickersFavoriteGet(
    offset?: number,
    limit?: number,
    title?: string,
    options?: AxiosRequestConfig
  ) {
    return StickersApiFp(this.configuration)
      .stickersFavoriteGet(offset, limit, title, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get sticker packs
   * @param {number} [offset] The number of items to skip before starting to collect the result set
   * @param {number} [limit] The numbers of items to return
   * @param {string} [title] Sticker\&#39;s title to filter by
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApi
   */
  public stickersGet(
    offset?: number,
    limit?: number,
    title?: string,
    options?: AxiosRequestConfig
  ) {
    return StickersApiFp(this.configuration)
      .stickersGet(offset, limit, title, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove pack from favorites
   * @param {any} id Numeric sticker pack id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApi
   */
  public stickersIdFavoriteDelete(id: any, options?: AxiosRequestConfig) {
    return StickersApiFp(this.configuration)
      .stickersIdFavoriteDelete(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Add pack to favorites
   * @param {any} id Numeric sticker pack id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApi
   */
  public stickersIdFavoritePost(id: any, options?: AxiosRequestConfig) {
    return StickersApiFp(this.configuration)
      .stickersIdFavoritePost(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get stickers from pack
   * @param {any} id Numeric sticker pack id
   * @param {number} [offset] The number of items to skip before starting to collect the result set
   * @param {number} [limit] The numbers of items to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApi
   */
  public stickersIdGet(
    id: any,
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig
  ) {
    return StickersApiFp(this.configuration)
      .stickersIdGet(id, offset, limit, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Add more stickers (images) to the pack
   * @param {any} id Numeric sticker pack id
   * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApi
   */
  public stickersIdPost(id: any, resource: File, options?: AxiosRequestConfig) {
    return StickersApiFp(this.configuration)
      .stickersIdPost(id, resource, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create sticker pack
   * @param {string} title Sticker pack title
   * @param {File} resource Sticker image (can be multiple images, just attach multiple files)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StickersApi
   */
  public stickersPost(
    title: string,
    resource: File,
    options?: AxiosRequestConfig
  ) {
    return StickersApiFp(this.configuration)
      .stickersPost(title, resource, options)
      .then(request => request(this.axios, this.basePath))
  }
}
